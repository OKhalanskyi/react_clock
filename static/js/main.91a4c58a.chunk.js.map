{"version":3,"sources":["Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","date","Date","clockTimeTimerId","this","window","setInterval","setState","console","info","toUTCString","slice","prevProps","props","debug","clockName","clearInterval","className","React","Component","getRandomName","value","now","toString","App","isShown","clockNameTimerId","hideClock","event","preventDefault","showClock","document","addEventListener","removeEventListener","ReactDOM","render","getElementById"],"mappings":"sNASaA,EAAb,4MACEC,MAAe,CACbC,KAAM,IAAIC,MAFd,EAKEC,iBAAmB,EALrB,uDAOE,WAAqB,IAAD,OAClBC,KAAKD,iBAAmBE,OAAOC,aAAY,WACzC,EAAKC,SAAS,CAAEN,KAAM,IAAIC,OAE1BM,QAAQC,KAAK,EAAKT,MAAMC,KAAKS,cAAcC,OAAO,IAAK,MACtD,OAZP,gCAeE,SAAmBC,GACbA,IAAcR,KAAKS,OAErBL,QAAQM,MAAR,uBAA8BF,EAAUG,UAAxC,eAAwDX,KAAKS,MAAME,cAlBzE,kCAsBE,WACEV,OAAOW,cAAcZ,KAAKD,oBAvB9B,oBA0BE,WACE,OACE,sBAAKc,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGb,KAAKS,MAAME,YAGb,YAED,sBAAME,UAAU,cAAhB,SACGb,KAAKJ,MAAMC,KAAKS,cAAcC,OAAO,IAAK,YApCrD,GAA2BO,IAAMC,WCLjC,SAASC,IACP,IAAMC,EAAQnB,KAAKoB,MAAMC,WAAWZ,OAAO,GAE3C,MAAM,SAAN,OAAgBU,GAGX,IAoCMG,EAAb,4MACExB,MAAe,CACbyB,SAAS,EACTV,UAAW,WAHf,EAMEW,iBAAmB,EANrB,EAwBEC,UAAY,SAACC,GACXA,EAAMC,iBAEN,EAAKtB,SAAS,CAAEkB,SAAS,KA3B7B,EA8BEK,UAAY,WACV,EAAKvB,SAAS,CAAEkB,SAAS,KA/B7B,uDAQE,WAAqB,IAAD,OAClBM,SAASC,iBAAiB,cAAe5B,KAAKuB,WAC9CI,SAASC,iBAAiB,QAAS5B,KAAK0B,WAExC1B,KAAKsB,iBAAmBrB,OAAOC,aAAY,WACzC,EAAKC,SAAS,CAAEQ,UAAWK,QAC1B,QAdP,kCAiBE,WACEW,SAASE,oBAAoB,cAAe7B,KAAKuB,WACjDI,SAASE,oBAAoB,QAAS7B,KAAK0B,WAE3CzB,OAAOW,cAAcZ,KAAKsB,oBArB9B,oBAkCE,WACE,OACE,sBAAKT,UAAU,MAAf,UACE,6CAECb,KAAKJ,MAAMyB,SAAW,cAAC,EAAD,CAAOV,UAAWX,KAAKJ,MAAMe,mBAvC5D,GAAyBG,IAAMC,WC3C/Be,IAASC,OACP,cAAC,EAAD,IACAJ,SAASK,eAAe,W","file":"static/js/main.91a4c58a.chunk.js","sourcesContent":["import React from 'react';\n\ntype State = {\n  date: Date,\n};\n\ntype Props = {\n  clockName: string,\n};\nexport class Clock extends React.Component<Props, State> {\n  state: State = {\n    date: new Date(),\n  };\n\n  clockTimeTimerId = 0;\n\n  componentDidMount() {\n    this.clockTimeTimerId = window.setInterval(() => {\n      this.setState({ date: new Date() });\n      // eslint-disable-next-line no-console\n      console.info(this.state.date.toUTCString().slice(-12, -4));\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>) {\n    if (prevProps !== this.props) {\n      // eslint-disable-next-line no-console\n      console.debug(`Renamed from ${prevProps.clockName} to ${this.props.clockName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.clockTimeTimerId);\n  }\n\n  render() {\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {this.props.clockName}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {this.state.date.toUTCString().slice(-12, -4)}\n        </span>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Clock } from './Clock';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\nexport const App2: React.FC = () => {\n  const today = new Date();\n  let clockName = 'Clock-0';\n\n  // This code starts a timer\n  const timerId = window.setInterval(() => {\n    clockName = getRandomName();\n  }, 3300);\n\n  // this code stops the timer\n  window.clearInterval(timerId);\n\n  return (\n    <div className=\"App\">\n      <h1>React clock</h1>\n\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {clockName}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {today.toUTCString().slice(-12, -4)}\n        </span>\n      </div>\n    </div>\n  );\n};\n\ntype State = {\n  isShown: boolean,\n  clockName: string,\n};\n\nexport class App extends React.Component {\n  state: State = {\n    isShown: true,\n    clockName: 'Clock-0',\n  };\n\n  clockNameTimerId = 0;\n\n  componentDidMount() {\n    document.addEventListener('contextmenu', this.hideClock);\n    document.addEventListener('click', this.showClock);\n\n    this.clockNameTimerId = window.setInterval(() => {\n      this.setState({ clockName: getRandomName() });\n    }, 3300);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('contextmenu', this.hideClock);\n    document.removeEventListener('click', this.showClock);\n\n    window.clearInterval(this.clockNameTimerId);\n  }\n\n  hideClock = (event: MouseEvent) => {\n    event.preventDefault();\n\n    this.setState({ isShown: false });\n  };\n\n  showClock = () => {\n    this.setState({ isShown: true });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        {this.state.isShown && <Clock clockName={this.state.clockName} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}